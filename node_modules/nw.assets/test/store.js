var assets = require('..'),
    expect = require('expect.js'),
    connect = require('connect'),
    cache = require('nw.cache');

describe('nw.assets.Store', function () {
    describe('without cache', function () {
        testStore(false);
    });

    describe('with cache', function () {
        testStore(true);
    });

    function testStore (cacheEnabled) {
        var store;
        var app;

        beforeEach(function (done) {
            function createStore (assetCache) {
                store = assets.Store({
                    url: 'myassets',
                    cache: assetCache
                });

                store.package('mypackage.js')
                .push(assets.Inline('myasset.js', 'mycontent☺'))
                .push(assets.Inline('myasset2.js', 'mycontent☺2'))
                .push('inlineContent');

                app = connect();
                app.use(store.middleware());

                done();
            }

            if (cacheEnabled) {
                cache.create('nw.assets', 'test', {
                    trust: false
                }, function (assetCache) {
                    createStore(assetCache);
                });
            } else {
                createStore(null);
            }
        });

        describe('#middleware()', function () {
            describe('#with asset match', function () {
                it('should response with content relative to it\'s url', function (done) {
                    app.request()
                    .get('/myassets/myasset.js')
                    .expect(200, 'mycontent☺', done);
                });

                testWith('myasset.js');
            });

            describe('#with package match', function () {
                it('should response with content relative to it\'s url', function (done) {
                    app.request()
                    .get('/myassets/mypackage.js')
                    .expect(200, 'mycontent☺;\nmycontent☺2;\ninlineContent', done);
                });

                testWith('mypackage.js');

                it('should set response ETag header', function (done) {
                    app.request()
                    .get('/myassets/mypackage.js')
                    .end(function (res) {
                        var etag = res.headers.etag;
                        expect(etag).to.not.be.empty();
                        done();
                    });
                });

                it('should support request If-None-Match header', function (done) {
                    app.request()
                    .get('/myassets/mypackage.js')
                    .end(function (res) {
                        var etag = res.headers.etag;
                        app.request()
                        .set('If-None-Match', etag)
                        .get('/myassets/mypackage.js')
                        .expect(304, '', done);
                    });
                });
            });

            function testWith (url) {
                it('should support HEAD request', function (done) {
                    app.request()
                    .head('/myassets/'+url)
                    .expect(200, '', done);
                });

                it('should set response Date header', function (done) {
                    app.request()
                    .head('/myassets/'+url)
                    .end(function (res) {
                        var serverTime = new Date(res.headers.date);
                        var localTime = new Date();
                        expect(localTime.getTime() - serverTime.getTime() < 2000).to.be.ok();
                        done();
                    });
                });

                it('should set response Cache-Control header', function (done) {
                    app.request()
                    .head('/myassets/'+url)
                    .end(function (res) {
                        var cacheControl = res.headers['cache-control'];
                        expect(/public,\s+max-age=(\d+)/.test(cacheControl)).to.be.ok();
                        done();
                    });
                });

                it('should set response Last-Modified header', function (done) {
                    app.request()
                    .head('/myassets/'+url)
                    .end(function (res) {
                        var lastModified = new Date(res.headers['last-modified']);
                        var localTime = new Date();
                        expect(localTime.getTime() - lastModified.getTime() < 2000).to.be.ok();
                        done();
                    });
                });

                it('should set response Content-Type header', function (done) {
                    app.request()
                    .head('/myassets/'+url)
                    .expect('Content-Type', 'text/javascript; charset=utf-8', done);
                });

                it('should set response Content-Length header', function (done) {
                    app.request()
                    .get('/myassets/'+url)
                    .end(function (res) {
                        var contentLength = parseInt(res.headers['content-length']);
                        expect(contentLength).to.be(new Buffer(res.body, 'utf8').length);
                        done();
                    });
                });

                it('should support request If-Modifield-Since header', function (done) {
                    app.request()
                    .get('/myassets/'+url)
                    .end(function (res) {
                        var lastModified = new Date(res.headers['last-modified']);
                        var ifModifiedSince = new Date(lastModified.getTime()+1000).toUTCString();
                        app.request()
                        .set('If-Modified-Since', ifModifiedSince)
                        .get('/myassets/'+url)
                        .expect(304, '', done);
                    });
                });
            }
        });

        describe('#package().getIncludeTags()', function () {
            it('should return string which contains relative links to asset names', function (done) {
                store.package('mypackage.js').getIncludeTags(function (tags) {
                    expect(tags).to.contain('<script src="myassets/myasset.js"></script>');
                    expect(tags).to.contain('<script src="myassets/myasset2.js"></script>');
                    done();
                });

                // TODO: compiled, digest
            });

            it('should return string which contains contents of inline assets', function (done) {
                store.package('mypackage.js').getIncludeTags(function (tags) {
                    expect(tags).to.contain('<script>inlineContent</script>');
                    done();
                });

                // TODO: compiled
            });
        });

        describe('#package().getContentType()', function () {
            it('should return right content types for different package types', function () {
                var store = assets.Store({
                    url: 'myassets'
                });

                expect(store.package('mypackage.js').getContentType()).to.be('text/javascript');
                expect(store.package('mypackage.css').getContentType()).to.be('text/css');
            });
        });
    };

    // TODO: compile
    // TODO: templates
    // TODO: StaticFile
});
