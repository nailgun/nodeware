var _ = require('underscore'),
    async = require('async'),
    url = require('url'),
    path = require('path'),
    crypto = require('crypto'),
    Inline = require('./inline');

module.exports = function (opts) {
    var store = _.extend({
        url: '',
        packageMaxAge: 30 * 24 * 60 * 60 * 1000, // one month
        singleAssetMaxAge: 0,
        cache: null
    }, opts);

    if (store.cache) {
        store.cache.mtime = true;
    }

    var packages = {};
    var allAssets = {};

    store.package = function (name) {
        return packages[name] = packages[name] || Package(name);
    };

    store.middleware = function () {
        var regexp = RegExp('^'+path.join('/', store.url, '(.+)')+'$');

        return function (req, res, next) {
            var pathname = url.parse(req.url).pathname;
            var m = regexp.exec(pathname);
            if (!m) {
                return next();
            }
            var name = m[1];

            var obj = packages[name];
            if (obj) {
                obj.maxAge = store.packageMaxAge;
            } else {
                obj = allAssets[name];
                if (obj) {
                    obj.maxAge = store.singleAssetMaxAge;
                } else {
                    return next();
                }
            }

            obj.contentType = getContentType(name);
            send(obj, req, res, next);
        };
    };

    function Package (name) {
        var package = {
            name: name,
            assets: [],
            lastModified: new Date(),
            digest: null
        };

        package.push = function (container) {
            if (_.isString(container) || _.isFunction(container)) {
                container = Inline(container);
            } else if (_.isObject(container)) {
                container = container;
            } else {
                throw new Error('Unknown asset container type: '+container);
            }

            _.each(container, function (asset) {
                asset.lastModified = new Date();
                package.assets.push(asset);
                if (asset.name) {
                    if (asset.name in allAssets) {
                        throw new Error('Asset '+asset.name+' already in store');
                    }
                    allAssets[asset.name] = asset;
                }
            });

            package.lastModified = new Date();
            return package;
        };

        package.getContent = function (callback) {
            if (store.cache) {
                store.cache.get(package.name, function (content, mtime) {
                    if (mtime) {
                        package.lastModified = mtime;
                    }
                    if (typeof content !== 'undefined') {
                        contentReady(content);
                    } else {
                        buildContent();
                    }
                });
            } else {
                buildContent();
            }

            function buildContent () {
                async.map(package.assets, function (asset, callback) {
                    asset.getContent(function (content) {
                        callback(null, content);
                    });
                }, function (err, contents) {
                    var separator = '';
                    if (path.extname(package.name) === '.js') {
                        separator = ';\n';
                    }
                    var content = contents.join(separator);

                    // TODO: compile

                    if (store.cache) {
                        try {
                            store.cache.set(package.name, content);
                        } catch (e) {
                            // TODO: log error
                        }
                    }
                    contentReady(content);
                });
            }

            function contentReady (content) {
                if (!package.digest) {
                    package.digest = calcDigest(content);
                }
                callback(content);
            }
        };

        package.getIncludeTags = function (callback) {
            var parts;
            var ext = path.extname(package.name);
            if (ext === '.js') {
                parts = {
                    prefix: '<script src="',
                    postfix: '"></script>\n',
                    inlinePrefix: '<script>',
                    inlinePostfix: '</script>\n'
                };
            } else if (ext === '.css') {
                parts = {
                    prefix: '<link href="',
                    postfix: '" rel="stylesheet">\n',
                    inlinePrefix: '<style>',
                    inlinePostfix: '</style>\n'
                };
            } else {
                parts = {
                    prefix: '',
                    postfix: '\n',
                    inlinePrefix: '',
                    inlinePostfix: '\n'
                };
            }

            async.map(package.assets, function (asset, callback) {
                if (asset.name) {
                    callback(null, parts.prefix + path.join(store.url, asset.name) + parts.postfix);
                } else {
                    asset.getContent(function (content) {
                        callback(null, parts.inlinePrefix + content + parts.inlinePostfix);
                    });
                }
            }, function (err, tags) {
                callback(tags.join(''));
            });
        };

        package.getContentType = function () {
            return getContentType(package.name);
        };

        return package;
    };


    function send (obj, req, res, next) {
        var head = req.method === 'HEAD';
        if (!head && req.method !== 'GET') {
            return error(400);
        }

        var overwriteMTime = false;

        res.getHeader('Date') || res.setHeader('Date', new Date().toUTCString());
        res.getHeader('Cache-Control') || res.setHeader('Cache-Control', 'public, max-age=' + (obj.maxAge / 1000));
        if (!res.getHeader('Last-Modified')) {
            overwriteMTime = true;
            res.setHeader('Last-Modified', obj.lastModified.toUTCString());
        }
        res.getHeader('Content-Type') || res.setHeader('Content-Type', obj.contentType + '; charset=utf-8');
        if (obj.digest) {
            res.getHeader('ETag') || res.setHeader('ETag', obj.digest);
        }

        if (!modified()) {
            res.statusCode = 304;
            return res.end();
        }

        obj.getContent(function (content) {
            if (obj.digest) {
                res.getHeader('ETag') || res.setHeader('ETag', obj.digest);
            }
            if (overwriteMTime) {
                res.setHeader('Last-Modified', obj.lastModified.toUTCString());
            }
            var buf = new Buffer(content, 'utf8');
            res.setHeader('Content-Length', buf.length);
            if (!head) {
                res.end(buf);
            } else {
                res.end();
            }
        });

        function error (status) {
            var err = new Error(http.STATUS_CODES[code]);
            err.status = code;
            next(err);
        }

        function modified () {
            var noneMatch = req.headers['if-none-match'];
            if (noneMatch && obj.digest) {
                noneMatch = noneMatch.split(/ *, */);
                if (~noneMatch.indexOf(obj.digest)) {
                    return false;
                }
            }

            var modifiedSince = req.headers['if-modified-since'];
            if (modifiedSince) {
                modifiedSince = new Date(modifiedSince);
                if (!isNaN(modifiedSince.getTime()) && obj.lastModified <= modifiedSince) {
                    return false;
                }
            }

            return true;
        }
    }

    return store;
};

function getContentType (name) {
    var ext = path.extname(name);
    if (ext === '.js') {
        return 'text/javascript';
    } else if (ext === '.css') {
        return 'text/css';
    } else {
        return 'text/plain';
    }
};

function calcDigest (content) {
    var hash = crypto.createHash('md5');
    hash.update(content);
    return hash.digest('hex');
};
