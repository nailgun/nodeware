var cache = require('..'),
    _ = require('underscore'),
    path = require('path');

// TODO: expires

describe('nw.cache', function () {
    var backendConfigs = [null];
    if (process.env.CACHE_BACKEND_CONFIG) {
        var config = require(path.resolve(process.env.CACHE_BACKEND_CONFIG));
        backendConfigs = backendConfigs.concat(config);
    }

    backendConfigs.forEach(function (backendConfig) {
        var backendName;
        if (backendConfig) {
            backendName = backendConfig.backend;
        } else {
            backendName = 'default (local memory)';
        }
        describe('with '+backendName+' backend', function () {
            testWith(backendConfig);
        });
    });

    function testWith(backendConfig) {
        function create () {
            var args = Array.prototype.slice.call(arguments);
            if (backendConfig) {
                var opts = args[args.length-2];
                if (typeof opts === 'object') {
                    _.extend(opts, backendConfig);
                } else {
                    opts = backendConfig;
                    args.splice(args.length-1, 0, opts);
                }
            }

            return cache.create.apply(cache, args);
        };

        describe('#create()', function () {
            it('should accept optional namespace args', function (done) {
                create('nw.cache', 'test', function (cache1) {
                    create('nw.cache', 'test', 'second', function (cache2) {
                        done();
                    });
                });
            });
        });

        describe('#subCache()', function () {
            it('should create cache in subnamespace', function (done) {
                create('nw.cache', 'test', function (cache1) {
                    create('nw.cache', 'test', 'second', function (cache2) {
                        var cache3 = cache1.subCache('second');
                        cache3.namespace().should.equal(cache2.namespace());
                        done();
                    });
                });
            });
        });

        describe('#set()', function () {
            it('should set cache entry value', function (done) {
                create('nw.cache', 'test', function (cache1) {
                    cache1.set('key', 'value', function () {
                        done();
                    });
                });
            });
        });

        describe('#get()', function () {
            it('should get cache entry value', function (done) {
                create('nw.cache', 'test', function (cache1) {
                    cache1.set('key', 'value', function () {
                        cache1.get('key', function (value) {
                            value.should.equal('value');
                            done();
                        });
                    });
                });
            });

            it('should retrive not existing values as undefined', function (done) {
                create('nw.cache', 'test', function (cache1) {
                    cache1.invalidate('key', function () {
                        cache1.get('key', function (value) {
                            (typeof value === 'undefined').should.be.ok;
                            done();
                        });
                    });
                });
            });
        });

        describe('#invalidate()', function () {
            it('should delete cache entry', function (done) {
                create('nw.cache', 'test', function (cache1) {
                    cache1.set('key', 'value', function () {
                        cache1.invalidate('key', function () {
                            cache1.get('key', function (value) {
                                (typeof value === 'undefined').should.be.ok;
                                done();
                            });
                        });
                    });
                });
            });
        });

        if (backendConfig) {
            describe('with trust', function () {
                it('is persistent across connections', function (done) {
                    create('nw.cache', 'test', function (cache1) {
                        cache1.set('key', 'value', function () {
                            
                            create('nw.cache', 'test', function (cache1) {
                                cache1.get('key', function (value) {
                                    value.should.equal('value');
                                    done();
                                });
                            });
                        });
                    });
                });
            });

            describe('without trust', function () {
                it('should invalidate all keys being set first time', function (done) {
                    create('nw.cache', 'test', function (cache1) {
                        cache1.set('key', 'value', function () {
                            
                            create('nw.cache', 'test', {
                                trust: false
                            }, function (cache1) {
                                cache1.get('key', function (value) {
                                    (typeof value === 'undefined').should.be.ok;
                                    done();
                                });
                            });
                        });
                    });
                });
            });
        }

        describe('with mtime', function () {
            it('should keep track modification timestamps', function (done) {
                create('nw.cache', 'test', {
                    mtime: true
                }, function (cache1) {
                    cache1.set('key', 'value', function () {
                        var now = new Date();
                        cache1.get('key', function (value, mtime) {
                            value.should.equal('value');
                            mtime.getTime().should.be.within(now.getTime()-2000, now.getTime());
                            done();
                        });
                    });
                });
            });
        });
    };
});
