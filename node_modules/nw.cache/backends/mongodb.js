var _ = require('underscore'),
    url = require('url'),
    mongodb = require('mongodb'),
    throws = require('nw.utils').throws;

function Connection (collection) {
    var connection = {};

    connection.get = function (key, callback) {
        if (!callback) {
            return;
        }
        collection.findOne({
            _id: key
        }, ['v', 'e'], throws(function (doc) {
            if (doc) {
                if (!doc.e || doc.e > new Date().getTime()) {
                    callback(doc.v);
                } else {
                    collection.remove({_id: key});
                    callback(undefined);
                }
            } else {
                callback(undefined);
            }
        }));
    };

    connection.set = function (key, value, expires, callback) {
        callback = callback || function () {};
        collection.update({
            _id: key
        }, {
            $set: {
                v: value,
                e: expires ? new Date().getTime() + expires : null
            }
        }, {
            safe: true,
            upsert: true
        }, throws(callback));
    };

    connection.invalidate = function (key, callback) {
        callback = callback || function () {};
        collection.remove({
            _id: key
        }, {
            safe: true
        }, throws(callback));
    };

    return connection;
};

module.exports = function (opts, callback) {
    if (_.isObject(opts.collection)) {
        callback(Connection(opts.collection));
    } else {
        var db;
        function openCollection () {
            db.collection(opts.collection || 'cache', throws(function (collection) {
                callback(Connection(collection));
            }));
        }

        if (!_.isObject(opts.db)) {
            var parsed = url.parse(opts.db);
            if (parsed.protocol !== 'mongodb:') {
                throw new Error('cache db protocol '+parsed.protocol+' is not supported');
            }
            var server = new mongodb.Server(parsed.hostname, parsed.port || mongodb.Connection.DEFAULT_PORT, {
                auto_reconnect: true
            });

            db = new mongodb.Db(parsed.pathname.slice(1), server);
            db.open(throws(openCollection));
        } else {
            db = opts.db;
            openCollection();
        }
    }
};
