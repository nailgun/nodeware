(function () {

var exports = {};

if (typeof module !== 'undefined') {
    module.exports = exports;

    var _ = require('underscore'),
        async = require('async'),
        parseResponse = require('./parse_response'),
        throws = require('nw.utils').throws;

    _.each(require('./fields'), function (obj, name) {
        exports[name] = obj;
    });
} else {
    window.nw = window.nw || {};
    window.nw.forms = exports;

    var throws = nw.utils.throws;
}

exports.create = function (fields, validate) {
    var form = {
        fields: fields,
        validate: validate
    };

    form.bind = function (data) {
        return bind(form, data);
    };

    form.handle = function (data, callback) {
        var onParse = throws(function (data) {
            var bound = form.bind(data);
            bound.clean(function () {
                callback(bound);
            });
        });

        if (typeof parseResponse !== 'undefined') {
            parseResponse(data, onParse);
        } else {
            onParse(null, data);
        }
    };

    return form;
};

function bind (form, data) {
    var bound = {
        validate: form.validate,
        fields: {}
    };

    _.each(_.keys(form.fields), (function (k) {
        bound.fields[k] = form.fields[k].bind(data[k]);
    }));
    var isValid = undefined;

    bound.clean = function (callback) {
        bound.data = {};
        bound.errors = {};

        // clean fields
        async.forEach(_.keys(bound.fields), function (k, callback) {
            bound.fields[k].clean(function (errs, value) {
                if (!errs) {
                    bound.data[k] = value;
                } else {
                    bound.errors[k] = [];
                    _.each(errs, function (err) {
                        bound.errors[k].push(err.message);
                    });
                }
                callback();
            });

        }, function () {
            isValid = _.keys(bound.errors).length === 0;
            if (!isValid || !bound.validate) {
                return callback();
            }

            // post-field validate
            bound.validate(bound, function (err, field) {
                if (!err) {
                    return callback();
                }

                var errors;
                if (field) {
                    errors = bound.errors[field] = bound.errors[field] || [];
                } else {
                    errors = bound.errors._noField = bound.errors._noField || [];
                }
                errors.push(err);

                isValid = false;
                callback();
            });
        });
    };

    bound.isValid = function () {
        return isValid;
    };

    return bound;
}

})();
